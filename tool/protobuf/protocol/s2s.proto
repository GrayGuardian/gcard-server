syntax = "proto2";
package s2s;

import "model.proto";
import "db.proto";
import "template.proto";
import "error.proto";
import "socket.proto";

message rpc {
    required int32 code = 1;    // 消息code
    required string from = 2;   //来源服务器
    required string to = 3; // 目标服务器
    required string router = 4; // 路由
    required string type = 5;   //类型 - Rpc or RpcRet
    // 下方命名规则：对应访问的router
    optional error.SError error = 20;

    optional conn conn = 50;
    optional connRet connRet = 51;

    optional playerEnter playerEnter = 100;
    optional playerEnterRet playerEnterRet = 101;
    optional playerLeave playerLeave = 102;
    optional playerLeaveRet playerLeaveRet = 103;
    optional socketRpc socketRpc = 104;
    optional socketRpcRet socketRpcRet = 105;
    optional kickOutFromIdx kickOutFromIdx = 106;
    optional kickOutFromIdxRet kickOutFromIdxRet = 107;
    optional pushIDToChannel pushIDToChannel = 108;
    optional pushIDToChannelRet pushIDToChannelRet = 109;
    optional pullIDToChannel pullIDToChannel = 110;
    optional pullIDToChannelRet pullIDToChannelRet = 111;
    optional sendToID sendToID = 112;
    optional sendToIDRet sendToIDRet = 113;
    optional sendToChannel sendToChannel = 114;
    optional sendToChannelRet sendToChannelRet = 115;

    optional getPlayerAid getPlayerAid = 200;
    optional getPlayerAidRet getPlayerAidRet = 201;

    optional getPlayerModel getPlayerModel = 300;
    optional getPlayerModelRet getPlayerModelRet = 301;
}


message conn {
    required db.ServerConfig config = 1;
}
message connRet{ }

message playerEnter {
    required db.PlayerInfo player = 1;
}
message playerEnterRet {}
message playerLeave {
    required string pid = 1;
}
message playerLeaveRet {}

message getPlayerAid {
    required string pid = 1;
}
message getPlayerAidRet {
    required int32 aid = 1;
}
message getPlayerModel{
    required string pid = 1;
    optional db.PlayerInfo data = 2;
}
message getPlayerModelRet{
    required bytes jsonBuff = 1;
}

message socketRpc{
    required socket.rpc data = 1;
    optional string pid = 2;
    optional int32 aid = 3;
}
message socketRpcRet{
    required socket.rpc data = 1;
}

message kickOutFromIdx{
    required string idx = 1;
}
message kickOutFromIdxRet{
    required bool flag = 1;
}
message pushIDToChannel {
    required string key = 1;
    required string idx = 2;
}
message pushIDToChannelRet {
    required bool flag = 1;
}
message pullIDToChannel {
    required string key = 1;
    required string idx = 2;
}
message pullIDToChannelRet {
    required bool flag = 1;
}
message sendToID{
    required string idx = 1;
    required socket.rpc data = 2;
}
message sendToIDRet{
    required bool flag = 1;
}
message sendToChannel{
    required string key = 1;
    required socket.rpc data = 2;
}
message sendToChannelRet{
    required int32 count = 1;
}